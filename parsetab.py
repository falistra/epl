
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftL_A_PARENleftR_A_PARENleftCROSSleftSTARleftCONDITIONINGleftPIPEleftEQUALSleftANDleftPLUSrightUNEGATEEQUALS NAME STRING PROBABILITY_VALUE BIT VALIDITY CONDITIONING LPAREN RPAREN L_S_PAREN R_S_PAREN L_B_PAREN R_B_PAREN L_A_PAREN R_A_PAREN SEMICOL COLON COMMA PLUS STAR PIPE KET CROSS AND NEGATE MARGINAL CPT TRUTH IDN FLIP SWAP RANDOM_STATE COPY PRINT FALSE FALSITY TRUE UNIFORM_STATEprogram : stm program : stm SEMICOL programstm : PRINT LPAREN exp RPAREN stm : exp stm : varStore EQUALS expexp : LPAREN exp RPARENexp : varLoad\n            | validity\n            | conditioning\n            | state\n            | stateExp\n            | predicate\n            | predicateExp\n            | channel\n            | channelExp\n            | stateTransformation\n            | predicateTransformation\n            | builtin_function\n            varLoad : NAME  varStore : NAME validity : exp VALIDITY expconditioning : exp CONDITIONING expstateTransformation : exp R_A_PAREN exppredicateTransformation : exp L_A_PAREN expstate : L_S_PAREN stateBody R_S_PARENstateBody : stateElem PLUS stateBodystateBody : stateElemstateElem : PROBABILITY_VALUE PIPE nameOrBool optionKETnameOrBool : name\n                    | string\n                    | booleanname : NAMEstring : STRINGboolean : TRUE\n                | FALSEoptionKET : KET\n                | emptystateExp : exp MARGINAL dimensionSel\n     dimensionSel : L_S_PAREN dimensionSelBody R_S_PARENdimensionSelBody : dimensionSelElem COMMA dimensionSelBodydimensionSelBody : dimensionSelElemdimensionSelElem : BITpredicate : L_B_PAREN predicateBody R_B_PARENpredicateBody : predicateElem COMMA predicateBodypredicateBody : predicateElempredicateElem : nameOrBool COLON PROBABILITY_VALUEpredicateExp : exp CROSS exp\n                    | exp AND exp\n                    | exp PLUS exp\n                    | exp PIPE exp\n                    | PROBABILITY_VALUE STAR exp\n    predicateExp : NEGATE exp %prec UNEGATE channel : L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN  matrice : L_S_PAREN righe R_S_PAREN  righe  : riga COMMA righe righe  : riga  riga : L_S_PAREN riga_values R_S_PAREN  riga_values  : PROBABILITY_VALUE  riga_values  : PROBABILITY_VALUE COMMA riga_valueschannelExp : exp STAR exp\n     domcod : L_S_PAREN domcod_values R_S_PAREN  domcod_values : nameOrBool  domcod_values :  nameOrBool COMMA domcod_valuesbuiltin_function : FLIP LPAREN PROBABILITY_VALUE RPAREN\n                    | UNIFORM_STATE LPAREN domcod_values RPAREN\n                    | RANDOM_STATE LPAREN domcod_values RPAREN\n                    | FALSITY LPAREN domcod_values RPAREN\n                    | COPY LPAREN domcod_values RPAREN\n                    | IDN LPAREN domcod_values RPAREN\n                    | SWAP LPAREN domcod COMMA domcod RPAREN\n                    | CPT LPAREN riga_values RPAREN\n                    | TRUTH LPAREN domcod_values RPARENempty : '
    
_lr_action_items = {'R_B_PAREN':([38,41,117,118,],[-45,81,-44,-46,]),'FLIP':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'STAR':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,33,48,49,50,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[-19,-12,-14,-11,54,-13,-9,-18,-16,-8,-17,-7,-15,-10,74,-19,-52,54,54,-43,-6,54,-60,54,54,-50,-22,-48,-38,54,-49,-25,54,-51,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'STRING':([7,36,51,67,69,72,73,80,100,103,115,],[43,43,43,43,43,43,43,43,43,43,43,]),'KET':([39,40,42,43,44,45,46,126,],[-29,-32,-30,-33,-31,-35,-34,141,]),'COMMA':([38,39,40,42,43,44,45,46,70,78,86,104,109,118,123,124,131,132,144,147,],[80,-29,-32,-30,-33,-31,-35,-34,106,115,121,129,134,-46,-42,140,146,-54,-61,-57,]),'$end':([2,3,6,9,11,14,16,17,19,20,24,26,27,28,29,31,48,49,76,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,116,119,120,127,130,135,136,139,150,152,],[-1,-19,-12,-14,-11,-4,-13,-9,0,-18,-16,-8,-17,-7,-15,-10,-19,-52,-2,-43,-6,-47,-60,-24,-23,-50,-22,-48,-38,-21,-49,-25,-5,-51,-64,-66,-3,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'SEMICOL':([2,3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,116,119,120,127,130,135,136,139,150,152,],[35,-19,-12,-14,-11,-4,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,-43,-6,-47,-60,-24,-23,-50,-22,-48,-38,-21,-49,-25,-5,-51,-64,-66,-3,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'BIT':([95,140,],[123,123,]),'CONDITIONING':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,50,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[-19,-12,-14,-11,58,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,58,58,-43,-6,58,58,58,58,-50,-22,-48,-38,58,-49,-25,58,58,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'PIPE':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,50,65,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[-19,-12,-14,-11,57,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,57,100,57,-43,-6,57,57,57,57,-50,57,-48,-38,57,-49,-25,57,57,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'NAME':([0,7,8,10,35,36,37,51,53,54,55,56,57,58,59,61,62,66,67,69,72,73,74,80,100,103,115,],[3,40,48,48,3,40,48,40,48,48,48,48,48,48,48,48,48,48,40,40,40,40,48,40,40,40,40,]),'RANDOM_STATE':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'FALSE':([7,36,51,67,69,72,73,80,100,103,115,],[45,45,45,45,45,45,45,45,45,45,45,]),'PRINT':([0,35,],[5,5,]),'TRUE':([7,36,51,67,69,72,73,80,100,103,115,],[46,46,46,46,46,46,46,46,46,46,46,]),'MARGINAL':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,50,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[-19,-12,-14,-11,60,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,60,60,-43,-6,-47,-60,-24,-23,-50,-22,-48,-38,60,-49,-25,60,-51,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'EQUALS':([3,18,],[-20,66,]),'SWAP':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'TRUTH':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'L_B_PAREN':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'CROSS':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,50,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[-19,-12,-14,-11,53,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,53,53,-43,-6,-47,-60,53,53,-50,-22,-48,-38,53,-49,-25,53,-51,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'L_A_PAREN':([0,3,6,8,9,10,11,14,16,17,20,24,26,27,28,29,31,35,37,48,49,50,53,54,55,56,57,58,59,61,62,66,74,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[25,-19,-12,25,-14,25,-11,55,-13,-9,-18,-16,-8,-17,-7,-15,-10,25,25,-19,-52,55,25,25,25,25,25,25,25,25,25,25,25,55,-43,-6,-47,-60,-24,-23,-50,-22,-48,-38,55,-49,-25,55,-51,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'NEGATE':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'R_A_PAREN':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,50,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,144,150,151,152,],[-19,-12,-14,-11,56,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,56,56,-43,-6,-47,-60,56,-23,-50,-22,-48,-38,56,-49,-25,56,-51,-64,-66,-65,-71,-69,-72,-68,-67,-39,-61,-70,152,-53,]),'LPAREN':([0,1,4,5,8,10,12,13,21,22,23,30,32,35,37,53,54,55,56,57,58,59,61,62,66,74,],[10,34,36,37,10,10,51,52,67,68,69,72,73,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'COPY':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'UNIFORM_STATE':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'R_S_PAREN':([39,40,42,43,44,45,46,63,64,78,86,107,109,122,123,124,125,126,128,133,137,138,141,142,143,147,148,149,],[-29,-32,-30,-33,-31,-35,-34,98,-27,-62,-58,132,-56,139,-42,-41,-26,-73,144,147,-63,-59,-36,-28,-37,-57,-55,-40,]),'CPT':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'RPAREN':([6,9,11,16,17,20,24,26,27,28,29,31,39,40,42,43,44,45,46,48,49,50,75,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,102,105,110,111,112,113,114,119,120,127,130,135,136,137,138,139,144,145,150,152,],[-12,-14,-11,-13,-9,-18,-16,-8,-17,-7,-15,-10,-29,-32,-30,-33,-31,-35,-34,-19,-52,83,113,114,-62,116,-43,-6,119,120,-58,-47,-60,-24,-23,-50,-22,-48,-38,-21,-49,-25,127,130,135,136,-51,-64,-66,-65,-71,-69,-72,-68,-67,-63,-59,-39,-61,150,-70,-53,]),'AND':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,50,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[-19,-12,-14,-11,59,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,59,59,-43,-6,59,59,59,59,59,59,-48,-38,59,-49,-25,59,59,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'L_S_PAREN':([0,8,10,25,35,37,53,54,55,56,57,58,59,60,61,62,66,68,71,74,106,129,134,146,],[15,15,15,71,15,15,15,15,15,15,15,15,15,95,15,15,15,103,108,15,103,103,108,103,]),'FALSITY':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'IDN':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'COLON':([39,40,42,43,44,45,46,47,],[-29,-32,-30,-33,-31,-35,-34,82,]),'PROBABILITY_VALUE':([0,8,10,15,34,35,37,52,53,54,55,56,57,58,59,61,62,66,74,82,99,108,121,],[33,33,33,65,75,33,33,86,33,33,33,33,33,33,33,33,33,33,33,118,65,86,86,]),'VALIDITY':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,48,49,50,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,127,130,135,136,139,150,152,],[-19,-12,-14,-11,61,-13,-9,-18,-16,-8,-17,-7,-15,-10,-19,-52,61,61,-43,-6,-47,-60,-24,-23,-50,-22,-48,-38,61,-49,-25,61,-51,-64,-66,-65,-71,-69,-72,-68,-67,-39,-70,-53,]),'PLUS':([3,6,9,11,14,16,17,20,24,26,27,28,29,31,39,40,42,43,44,45,46,48,49,50,64,79,81,83,87,88,89,90,91,92,93,94,96,97,98,101,112,113,114,119,120,126,127,130,135,136,139,141,142,143,150,152,],[-19,-12,-14,-11,62,-13,-9,-18,-16,-8,-17,-7,-15,-10,-29,-32,-30,-33,-31,-35,-34,-19,-52,62,99,62,-43,-6,62,62,62,62,62,62,62,-38,62,-49,-25,62,62,-64,-66,-65,-71,-73,-69,-72,-68,-67,-39,-36,-28,-37,-70,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'dimensionSel':([60,],[94,]),'string':([7,36,51,67,69,72,73,80,100,103,115,],[42,42,42,42,42,42,42,42,42,42,42,]),'predicateElem':([7,80,],[38,38,]),'domcod_values':([36,51,67,69,72,73,103,115,],[77,84,102,105,110,111,128,137,]),'stm':([0,35,],[2,2,]),'predicateTransformation':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'stateElem':([15,99,],[64,64,]),'boolean':([7,36,51,67,69,72,73,80,100,103,115,],[44,44,44,44,44,44,44,44,44,44,44,]),'predicateBody':([7,80,],[41,117,]),'builtin_function':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'riga_values':([52,108,121,],[85,133,138,]),'riga':([71,134,],[109,109,]),'varStore':([0,35,],[18,18,]),'name':([7,36,51,67,69,72,73,80,100,103,115,],[39,39,39,39,39,39,39,39,39,39,39,]),'dimensionSelBody':([95,140,],[122,149,]),'stateTransformation':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'program':([0,35,],[19,76,]),'stateBody':([15,99,],[63,125,]),'validity':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'optionKET':([126,],[142,]),'channel':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'predicate':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'stateExp':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'varLoad':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'channelExp':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'state':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'righe':([71,134,],[107,148,]),'empty':([126,],[143,]),'exp':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[14,49,50,14,79,87,88,89,90,91,92,93,96,97,101,112,]),'conditioning':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'matrice':([25,],[70,]),'dimensionSelElem':([95,140,],[124,124,]),'domcod':([68,106,129,146,],[104,131,145,151,]),'nameOrBool':([7,36,51,67,69,72,73,80,100,103,115,],[47,78,78,78,78,78,78,47,126,78,78,]),'predicateExp':([0,8,10,35,37,53,54,55,56,57,58,59,61,62,66,74,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stm','program',1,'p_program_singleC','eplParser.py',151),
  ('program -> stm SEMICOL program','program',3,'p_program_seqC','eplParser.py',163),
  ('stm -> PRINT LPAREN exp RPAREN','stm',4,'p_stm_print','eplParser.py',172),
  ('stm -> exp','stm',1,'p_stm_exp','eplParser.py',176),
  ('stm -> varStore EQUALS exp','stm',3,'p_stm_assign','eplParser.py',180),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_par','eplParser.py',184),
  ('exp -> varLoad','exp',1,'p_exp_state','eplParser.py',188),
  ('exp -> validity','exp',1,'p_exp_state','eplParser.py',189),
  ('exp -> conditioning','exp',1,'p_exp_state','eplParser.py',190),
  ('exp -> state','exp',1,'p_exp_state','eplParser.py',191),
  ('exp -> stateExp','exp',1,'p_exp_state','eplParser.py',192),
  ('exp -> predicate','exp',1,'p_exp_state','eplParser.py',193),
  ('exp -> predicateExp','exp',1,'p_exp_state','eplParser.py',194),
  ('exp -> channel','exp',1,'p_exp_state','eplParser.py',195),
  ('exp -> channelExp','exp',1,'p_exp_state','eplParser.py',196),
  ('exp -> stateTransformation','exp',1,'p_exp_state','eplParser.py',197),
  ('exp -> predicateTransformation','exp',1,'p_exp_state','eplParser.py',198),
  ('exp -> builtin_function','exp',1,'p_exp_state','eplParser.py',199),
  ('varLoad -> NAME','varLoad',1,'p_varLoad','eplParser.py',205),
  ('varStore -> NAME','varStore',1,'p_varStore','eplParser.py',209),
  ('validity -> exp VALIDITY exp','validity',3,'p_validity','eplParser.py',213),
  ('conditioning -> exp CONDITIONING exp','conditioning',3,'p_conditioning','eplParser.py',217),
  ('stateTransformation -> exp R_A_PAREN exp','stateTransformation',3,'p_stateTransformation','eplParser.py',221),
  ('predicateTransformation -> exp L_A_PAREN exp','predicateTransformation',3,'p_predicate_transformation','eplParser.py',225),
  ('state -> L_S_PAREN stateBody R_S_PAREN','state',3,'p_state_par','eplParser.py',229),
  ('stateBody -> stateElem PLUS stateBody','stateBody',3,'p_stateBody','eplParser.py',233),
  ('stateBody -> stateElem','stateBody',1,'p_stateBody_singleElem','eplParser.py',238),
  ('stateElem -> PROBABILITY_VALUE PIPE nameOrBool optionKET','stateElem',4,'p_state_elem','eplParser.py',242),
  ('nameOrBool -> name','nameOrBool',1,'p_nameOrBool','eplParser.py',246),
  ('nameOrBool -> string','nameOrBool',1,'p_nameOrBool','eplParser.py',247),
  ('nameOrBool -> boolean','nameOrBool',1,'p_nameOrBool','eplParser.py',248),
  ('name -> NAME','name',1,'p_name','eplParser.py',252),
  ('string -> STRING','string',1,'p_string','eplParser.py',256),
  ('boolean -> TRUE','boolean',1,'p_boolean','eplParser.py',260),
  ('boolean -> FALSE','boolean',1,'p_boolean','eplParser.py',261),
  ('optionKET -> KET','optionKET',1,'p_optionKET','eplParser.py',265),
  ('optionKET -> empty','optionKET',1,'p_optionKET','eplParser.py',266),
  ('stateExp -> exp MARGINAL dimensionSel','stateExp',3,'p_state_Exp','eplParser.py',269),
  ('dimensionSel -> L_S_PAREN dimensionSelBody R_S_PAREN','dimensionSel',3,'p_dimensionSel','eplParser.py',274),
  ('dimensionSelBody -> dimensionSelElem COMMA dimensionSelBody','dimensionSelBody',3,'p_dimensionSelBody','eplParser.py',278),
  ('dimensionSelBody -> dimensionSelElem','dimensionSelBody',1,'p_dimensionSelBody_singleElem','eplParser.py',283),
  ('dimensionSelElem -> BIT','dimensionSelElem',1,'p_dimensionSelElem','eplParser.py',287),
  ('predicate -> L_B_PAREN predicateBody R_B_PAREN','predicate',3,'p_predicate_par','eplParser.py',291),
  ('predicateBody -> predicateElem COMMA predicateBody','predicateBody',3,'p_predicateBody','eplParser.py',295),
  ('predicateBody -> predicateElem','predicateBody',1,'p_predicateBody_singleElem','eplParser.py',300),
  ('predicateElem -> nameOrBool COLON PROBABILITY_VALUE','predicateElem',3,'p_predicate_elem','eplParser.py',304),
  ('predicateExp -> exp CROSS exp','predicateExp',3,'p_predicate_exp','eplParser.py',308),
  ('predicateExp -> exp AND exp','predicateExp',3,'p_predicate_exp','eplParser.py',309),
  ('predicateExp -> exp PLUS exp','predicateExp',3,'p_predicate_exp','eplParser.py',310),
  ('predicateExp -> exp PIPE exp','predicateExp',3,'p_predicate_exp','eplParser.py',311),
  ('predicateExp -> PROBABILITY_VALUE STAR exp','predicateExp',3,'p_predicate_exp','eplParser.py',312),
  ('predicateExp -> NEGATE exp','predicateExp',2,'p_predicate_negate','eplParser.py',323),
  ('channel -> L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN','channel',7,'p_channel_def','eplParser.py',327),
  ('matrice -> L_S_PAREN righe R_S_PAREN','matrice',3,'p_matrice','eplParser.py',331),
  ('righe -> riga COMMA righe','righe',3,'p_righe','eplParser.py',335),
  ('righe -> riga','righe',1,'p_righe_singleRow','eplParser.py',340),
  ('riga -> L_S_PAREN riga_values R_S_PAREN','riga',3,'p_riga','eplParser.py',344),
  ('riga_values -> PROBABILITY_VALUE','riga_values',1,'p_riga_values_single','eplParser.py',348),
  ('riga_values -> PROBABILITY_VALUE COMMA riga_values','riga_values',3,'p_riga_values','eplParser.py',352),
  ('channelExp -> exp STAR exp','channelExp',3,'p_channel_Exp','eplParser.py',357),
  ('domcod -> L_S_PAREN domcod_values R_S_PAREN','domcod',3,'p_domcod','eplParser.py',362),
  ('domcod_values -> nameOrBool','domcod_values',1,'p_domcod_values_last','eplParser.py',366),
  ('domcod_values -> nameOrBool COMMA domcod_values','domcod_values',3,'p_domcod_values','eplParser.py',370),
  ('builtin_function -> FLIP LPAREN PROBABILITY_VALUE RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',375),
  ('builtin_function -> UNIFORM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',376),
  ('builtin_function -> RANDOM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',377),
  ('builtin_function -> FALSITY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',378),
  ('builtin_function -> COPY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',379),
  ('builtin_function -> IDN LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',380),
  ('builtin_function -> SWAP LPAREN domcod COMMA domcod RPAREN','builtin_function',6,'p_builtin_function','eplParser.py',381),
  ('builtin_function -> CPT LPAREN riga_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',382),
  ('builtin_function -> TRUTH LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',383),
  ('empty -> <empty>','empty',0,'p_empty','eplParser.py',387),
]
