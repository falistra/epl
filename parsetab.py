
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftL_A_PARENleftR_A_PARENleftCROSSleftSTARleftCONDITIONINGleftPIPEleftEQUALSleftANDleftPLUSrightUNEGATEEQUALS NAME STRING PROBABILITY_VALUE BIT VALIDITY CONDITIONING LPAREN RPAREN L_S_PAREN R_S_PAREN L_B_PAREN R_B_PAREN L_A_PAREN R_A_PAREN SEMICOL COLON COMMA PLUS STAR PIPE KET CROSS AND NEGATE MARGINAL COPY FALSITY IDN CPT UNIFORM_STATE PRINT FLIP TRUE TRUTH RANDOM_STATE FALSE SWAPprogram : stm program : stm SEMICOL programstm : PRINT LPAREN exp RPAREN stm : exp stm : varStore EQUALS expexp : LPAREN exp RPARENexp : varLoad\n            | validity\n            | conditioning\n            | state\n            | stateExp\n            | predicate\n            | predicateExp\n            | channel\n            | channelExp\n            | stateTransformation\n            | predicateTransformation\n            | builtin_function\n            varLoad : NAME  varStore : NAME validity : exp VALIDITY expconditioning : exp CONDITIONING expstateTransformation : exp R_A_PAREN exppredicateTransformation : exp L_A_PAREN expstate : L_S_PAREN stateBody R_S_PARENstateBody : stateElem PLUS stateBodystateBody : stateElemstateElem : PROBABILITY_VALUE PIPE nameOrBool optionKETnameOrBool : name\n                    | string\n                    | booleanname : NAMEstring : STRINGboolean : TRUE\n                | FALSEoptionKET : KET\n                | emptystateExp : exp MARGINAL dimensionSel\n     dimensionSel : L_S_PAREN dimensionSelBody R_S_PARENdimensionSelBody : dimensionSelElem COMMA dimensionSelBodydimensionSelBody : dimensionSelElemdimensionSelElem : BITpredicate : L_B_PAREN predicateBody R_B_PARENpredicateBody : predicateElem COMMA predicateBodypredicateBody : predicateElempredicateElem : nameOrBool COLON PROBABILITY_VALUEpredicateExp : exp CROSS exp\n                    | exp AND exp\n                    | exp PLUS exp\n                    | exp PIPE exp\n                    | PROBABILITY_VALUE STAR exp\n    predicateExp : NEGATE exp %prec UNEGATE channel : L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN  matrice : L_S_PAREN righe R_S_PAREN  righe  : riga COMMA righe righe  : riga  riga : L_S_PAREN riga_values R_S_PAREN  riga_values  : PROBABILITY_VALUE  riga_values  : PROBABILITY_VALUE COMMA riga_valueschannelExp : exp STAR exp\n     domcod : L_S_PAREN domcod_values R_S_PAREN  domcod_values : nameOrBool  domcod_values :  nameOrBool COMMA domcod_valuesbuiltin_function : FLIP LPAREN PROBABILITY_VALUE RPAREN\n                    | UNIFORM_STATE LPAREN domcod_values RPAREN\n                    | RANDOM_STATE LPAREN domcod_values RPAREN\n                    | FALSITY LPAREN domcod_values RPAREN\n                    | COPY LPAREN domcod_values RPAREN\n                    | IDN LPAREN domcod_values RPAREN\n                    | SWAP LPAREN domcod COMMA domcod RPAREN\n                    | CPT LPAREN riga_values RPAREN\n                    | TRUTH LPAREN domcod_values RPARENempty : '
    
_lr_action_items = {'FALSITY':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'EQUALS':([15,28,],[51,-20,]),'R_A_PAREN':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,65,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,141,150,151,152,],[-11,-8,-12,45,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,45,45,-50,45,-22,-60,-47,-38,-48,-23,-49,45,-43,-6,-25,-51,45,-68,-71,-64,-67,-66,-69,-65,-72,-39,-61,-70,152,-53,]),'AND':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,65,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[-11,-8,-12,44,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,44,44,44,44,44,44,44,-38,-48,44,-49,44,-43,-6,-25,44,44,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'RANDOM_STATE':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'RPAREN':([1,2,4,9,10,11,17,21,24,25,31,32,49,50,54,56,57,59,60,61,62,65,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,95,96,99,100,101,103,109,110,111,112,114,115,117,123,124,127,134,135,137,138,139,141,142,150,152,],[-11,-8,-12,-13,-14,-9,-15,-18,-17,-10,-16,-7,-52,-19,-35,-32,-30,-31,-29,-33,-34,101,-62,114,115,-58,117,-21,-50,-24,-22,-60,-47,-38,-48,-23,-49,123,124,-43,127,-6,-25,134,135,-51,136,-68,-71,-64,-67,-66,-69,-65,-72,-63,-59,-39,-61,150,-70,-53,]),'L_B_PAREN':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'IDN':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'BIT':([86,140,],[119,119,]),'LPAREN':([0,3,5,6,13,14,16,18,20,22,27,29,33,37,38,39,40,41,42,44,45,46,47,51,73,74,],[22,34,35,36,48,22,52,53,64,22,71,72,74,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'L_S_PAREN':([0,14,22,26,37,38,39,40,41,42,43,44,45,46,47,48,51,69,73,74,108,122,132,148,],[23,23,23,69,23,23,23,23,23,23,86,23,23,23,23,92,23,105,23,23,92,92,105,92,]),'TRUE':([19,34,52,53,64,71,72,92,97,104,113,],[62,62,62,62,62,62,62,62,62,62,62,]),'CROSS':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,65,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[-11,-8,-12,42,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,42,42,-50,42,-22,-60,-47,-38,-48,42,-49,42,-43,-6,-25,-51,42,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'CPT':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'STRING':([19,34,52,53,64,71,72,92,97,104,113,],[61,61,61,61,61,61,61,61,61,61,61,]),'SEMICOL':([1,2,4,7,9,10,11,12,17,21,24,25,28,31,32,49,50,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,114,115,117,123,124,127,134,135,136,139,150,152,],[-11,-8,-12,-4,-13,-14,-9,47,-15,-18,-17,-10,-19,-16,-7,-52,-19,-21,-50,-24,-22,-60,-47,-38,-48,-23,-49,-5,-43,-6,-25,-51,-68,-71,-64,-67,-66,-69,-65,-72,-3,-39,-70,-53,]),'R_B_PAREN':([55,63,125,126,],[-45,99,-44,-46,]),'R_S_PAREN':([54,56,57,59,60,61,62,66,67,75,78,106,107,118,119,120,121,128,129,130,137,138,143,144,145,146,147,149,],[-35,-32,-30,-31,-29,-33,-34,-27,103,-62,-58,131,-56,139,-42,-41,141,-26,-73,146,-63,-59,-37,-28,-36,-57,-55,-40,]),'PLUS':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,54,56,57,59,60,61,62,65,66,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,129,134,135,139,143,144,145,150,152,],[-11,-8,-12,46,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,-35,-32,-30,-31,-29,-33,-34,46,102,46,46,46,46,46,46,-38,46,46,-49,46,-43,-6,-25,46,46,-68,-71,-64,-67,-66,-69,-73,-65,-72,-39,-37,-28,-36,-70,-53,]),'FLIP':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'VALIDITY':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,65,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[-11,-8,-12,37,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,37,37,-50,-24,-22,-60,-47,-38,-48,-23,-49,37,-43,-6,-25,-51,37,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'L_A_PAREN':([0,1,2,4,7,9,10,11,14,17,21,22,24,25,28,31,32,37,38,39,40,41,42,44,45,46,47,49,50,51,65,73,74,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[26,-11,-8,-12,39,-13,-14,-9,26,-15,-18,26,-17,-10,-19,-16,-7,26,26,26,26,26,26,26,26,26,26,-52,-19,26,39,26,26,39,-50,-24,-22,-60,-47,-38,-48,-23,-49,39,-43,-6,-25,-51,39,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'UNIFORM_STATE':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'NAME':([0,14,19,22,34,37,38,39,40,41,42,44,45,46,47,51,52,53,64,71,72,73,74,92,97,104,113,],[28,50,56,50,56,50,50,50,50,50,50,50,50,50,28,50,56,56,56,56,56,50,50,56,56,56,56,]),'TRUTH':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'FALSE':([19,34,52,53,64,71,72,92,97,104,113,],[54,54,54,54,54,54,54,54,54,54,54,]),'PROBABILITY_VALUE':([0,14,22,23,35,36,37,38,39,40,41,42,44,45,46,47,51,73,74,98,102,105,116,],[30,30,30,68,78,79,30,30,30,30,30,30,30,30,30,30,30,30,30,126,68,78,78,]),'KET':([54,56,57,59,60,61,62,129,],[-35,-32,-30,-31,-29,-33,-34,145,]),'STAR':([1,2,4,7,9,10,11,17,21,24,25,28,30,31,32,49,50,65,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[-11,-8,-12,41,-13,-14,-9,-15,-18,-17,-10,-19,73,-16,-7,-52,-19,41,41,-50,41,-22,-60,41,-38,-48,41,-49,41,-43,-6,-25,-51,41,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'SWAP':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'COMMA':([54,55,56,57,59,60,61,62,70,75,78,93,107,119,120,126,131,133,141,146,],[-35,97,-32,-30,-31,-29,-33,-34,108,113,116,122,132,-42,140,-46,-54,148,-61,-57,]),'MARGINAL':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,65,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[-11,-8,-12,43,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,43,43,-50,-24,-22,-60,-47,-38,-48,-23,-49,43,-43,-6,-25,-51,43,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'COLON':([54,56,57,58,59,60,61,62,],[-35,-32,-30,98,-31,-29,-33,-34,]),'CONDITIONING':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,65,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[-11,-8,-12,40,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,40,40,-50,40,-22,40,40,-38,-48,40,-49,40,-43,-6,-25,40,40,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'COPY':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'PIPE':([1,2,4,7,9,10,11,17,21,24,25,28,31,32,49,50,65,68,80,81,82,83,84,85,87,88,89,90,94,99,101,103,111,112,114,115,117,123,124,127,134,135,139,150,152,],[-11,-8,-12,38,-13,-14,-9,-15,-18,-17,-10,-19,-16,-7,-52,-19,38,104,38,-50,38,38,38,38,-38,-48,38,-49,38,-43,-6,-25,38,38,-68,-71,-64,-67,-66,-69,-65,-72,-39,-70,-53,]),'NEGATE':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'$end':([1,2,4,7,8,9,10,11,12,17,21,24,25,28,31,32,49,50,80,81,82,83,84,85,87,88,89,90,91,94,99,101,103,111,114,115,117,123,124,127,134,135,136,139,150,152,],[-11,-8,-12,-4,0,-13,-14,-9,-1,-15,-18,-17,-10,-19,-16,-7,-52,-19,-21,-50,-24,-22,-60,-47,-38,-48,-23,-49,-2,-5,-43,-6,-25,-51,-68,-71,-64,-67,-66,-69,-65,-72,-3,-39,-70,-53,]),'PRINT':([0,47,],[33,33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'channelExp':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'dimensionSel':([43,],[87,]),'righe':([69,132,],[106,147,]),'builtin_function':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'domcod_values':([34,52,53,64,71,72,92,113,],[76,95,96,100,109,110,121,137,]),'stateExp':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'matrice':([26,],[70,]),'boolean':([19,34,52,53,64,71,72,92,97,104,113,],[59,59,59,59,59,59,59,59,59,59,59,]),'domcod':([48,108,122,148,],[93,133,142,151,]),'validity':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'name':([19,34,52,53,64,71,72,92,97,104,113,],[60,60,60,60,60,60,60,60,60,60,60,]),'predicateElem':([19,97,],[55,55,]),'stateElem':([23,102,],[66,66,]),'predicate':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'exp':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[7,49,65,80,81,82,83,84,85,88,89,90,7,94,111,112,]),'predicateBody':([19,97,],[63,125,]),'predicateTransformation':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'empty':([129,],[143,]),'state':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'program':([0,47,],[8,91,]),'predicateExp':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'optionKET':([129,],[144,]),'dimensionSelElem':([86,140,],[120,120,]),'nameOrBool':([19,34,52,53,64,71,72,92,97,104,113,],[58,75,75,75,75,75,75,75,58,129,75,]),'channel':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'conditioning':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'stm':([0,47,],[12,12,]),'dimensionSelBody':([86,140,],[118,149,]),'riga':([69,132,],[107,107,]),'string':([19,34,52,53,64,71,72,92,97,104,113,],[57,57,57,57,57,57,57,57,57,57,57,]),'stateBody':([23,102,],[67,128,]),'stateTransformation':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'varStore':([0,47,],[15,15,]),'riga_values':([35,105,116,],[77,130,138,]),'varLoad':([0,14,22,37,38,39,40,41,42,44,45,46,47,51,73,74,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stm','program',1,'p_program_singleC','eplParser.py',127),
  ('program -> stm SEMICOL program','program',3,'p_program_seqC','eplParser.py',131),
  ('stm -> PRINT LPAREN exp RPAREN','stm',4,'p_stm_print','eplParser.py',136),
  ('stm -> exp','stm',1,'p_stm_exp','eplParser.py',140),
  ('stm -> varStore EQUALS exp','stm',3,'p_stm_assign','eplParser.py',144),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_par','eplParser.py',148),
  ('exp -> varLoad','exp',1,'p_exp_state','eplParser.py',152),
  ('exp -> validity','exp',1,'p_exp_state','eplParser.py',153),
  ('exp -> conditioning','exp',1,'p_exp_state','eplParser.py',154),
  ('exp -> state','exp',1,'p_exp_state','eplParser.py',155),
  ('exp -> stateExp','exp',1,'p_exp_state','eplParser.py',156),
  ('exp -> predicate','exp',1,'p_exp_state','eplParser.py',157),
  ('exp -> predicateExp','exp',1,'p_exp_state','eplParser.py',158),
  ('exp -> channel','exp',1,'p_exp_state','eplParser.py',159),
  ('exp -> channelExp','exp',1,'p_exp_state','eplParser.py',160),
  ('exp -> stateTransformation','exp',1,'p_exp_state','eplParser.py',161),
  ('exp -> predicateTransformation','exp',1,'p_exp_state','eplParser.py',162),
  ('exp -> builtin_function','exp',1,'p_exp_state','eplParser.py',163),
  ('varLoad -> NAME','varLoad',1,'p_varLoad','eplParser.py',168),
  ('varStore -> NAME','varStore',1,'p_varStore','eplParser.py',172),
  ('validity -> exp VALIDITY exp','validity',3,'p_validity','eplParser.py',176),
  ('conditioning -> exp CONDITIONING exp','conditioning',3,'p_conditioning','eplParser.py',180),
  ('stateTransformation -> exp R_A_PAREN exp','stateTransformation',3,'p_stateTransformation','eplParser.py',184),
  ('predicateTransformation -> exp L_A_PAREN exp','predicateTransformation',3,'p_predicate_transformation','eplParser.py',188),
  ('state -> L_S_PAREN stateBody R_S_PAREN','state',3,'p_state_par','eplParser.py',192),
  ('stateBody -> stateElem PLUS stateBody','stateBody',3,'p_stateBody','eplParser.py',196),
  ('stateBody -> stateElem','stateBody',1,'p_stateBody_singleElem','eplParser.py',201),
  ('stateElem -> PROBABILITY_VALUE PIPE nameOrBool optionKET','stateElem',4,'p_state_elem','eplParser.py',205),
  ('nameOrBool -> name','nameOrBool',1,'p_nameOrBool','eplParser.py',209),
  ('nameOrBool -> string','nameOrBool',1,'p_nameOrBool','eplParser.py',210),
  ('nameOrBool -> boolean','nameOrBool',1,'p_nameOrBool','eplParser.py',211),
  ('name -> NAME','name',1,'p_name','eplParser.py',215),
  ('string -> STRING','string',1,'p_string','eplParser.py',219),
  ('boolean -> TRUE','boolean',1,'p_boolean','eplParser.py',223),
  ('boolean -> FALSE','boolean',1,'p_boolean','eplParser.py',224),
  ('optionKET -> KET','optionKET',1,'p_optionKET','eplParser.py',228),
  ('optionKET -> empty','optionKET',1,'p_optionKET','eplParser.py',229),
  ('stateExp -> exp MARGINAL dimensionSel','stateExp',3,'p_state_Exp','eplParser.py',232),
  ('dimensionSel -> L_S_PAREN dimensionSelBody R_S_PAREN','dimensionSel',3,'p_dimensionSel','eplParser.py',237),
  ('dimensionSelBody -> dimensionSelElem COMMA dimensionSelBody','dimensionSelBody',3,'p_dimensionSelBody','eplParser.py',241),
  ('dimensionSelBody -> dimensionSelElem','dimensionSelBody',1,'p_dimensionSelBody_singleElem','eplParser.py',246),
  ('dimensionSelElem -> BIT','dimensionSelElem',1,'p_dimensionSelElem','eplParser.py',250),
  ('predicate -> L_B_PAREN predicateBody R_B_PAREN','predicate',3,'p_predicate_par','eplParser.py',254),
  ('predicateBody -> predicateElem COMMA predicateBody','predicateBody',3,'p_predicateBody','eplParser.py',258),
  ('predicateBody -> predicateElem','predicateBody',1,'p_predicateBody_singleElem','eplParser.py',263),
  ('predicateElem -> nameOrBool COLON PROBABILITY_VALUE','predicateElem',3,'p_predicate_elem','eplParser.py',267),
  ('predicateExp -> exp CROSS exp','predicateExp',3,'p_predicate_exp','eplParser.py',271),
  ('predicateExp -> exp AND exp','predicateExp',3,'p_predicate_exp','eplParser.py',272),
  ('predicateExp -> exp PLUS exp','predicateExp',3,'p_predicate_exp','eplParser.py',273),
  ('predicateExp -> exp PIPE exp','predicateExp',3,'p_predicate_exp','eplParser.py',274),
  ('predicateExp -> PROBABILITY_VALUE STAR exp','predicateExp',3,'p_predicate_exp','eplParser.py',275),
  ('predicateExp -> NEGATE exp','predicateExp',2,'p_predicate_negate','eplParser.py',280),
  ('channel -> L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN','channel',7,'p_channel_def','eplParser.py',284),
  ('matrice -> L_S_PAREN righe R_S_PAREN','matrice',3,'p_matrice','eplParser.py',288),
  ('righe -> riga COMMA righe','righe',3,'p_righe','eplParser.py',292),
  ('righe -> riga','righe',1,'p_righe_singleRow','eplParser.py',297),
  ('riga -> L_S_PAREN riga_values R_S_PAREN','riga',3,'p_riga','eplParser.py',301),
  ('riga_values -> PROBABILITY_VALUE','riga_values',1,'p_riga_values_single','eplParser.py',305),
  ('riga_values -> PROBABILITY_VALUE COMMA riga_values','riga_values',3,'p_riga_values','eplParser.py',309),
  ('channelExp -> exp STAR exp','channelExp',3,'p_channel_Exp','eplParser.py',314),
  ('domcod -> L_S_PAREN domcod_values R_S_PAREN','domcod',3,'p_domcod','eplParser.py',319),
  ('domcod_values -> nameOrBool','domcod_values',1,'p_domcod_values_last','eplParser.py',323),
  ('domcod_values -> nameOrBool COMMA domcod_values','domcod_values',3,'p_domcod_values','eplParser.py',327),
  ('builtin_function -> FLIP LPAREN PROBABILITY_VALUE RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',332),
  ('builtin_function -> UNIFORM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',333),
  ('builtin_function -> RANDOM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',334),
  ('builtin_function -> FALSITY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',335),
  ('builtin_function -> COPY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',336),
  ('builtin_function -> IDN LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',337),
  ('builtin_function -> SWAP LPAREN domcod COMMA domcod RPAREN','builtin_function',6,'p_builtin_function','eplParser.py',338),
  ('builtin_function -> CPT LPAREN riga_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',339),
  ('builtin_function -> TRUTH LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',340),
  ('empty -> <empty>','empty',0,'p_empty','eplParser.py',344),
]
