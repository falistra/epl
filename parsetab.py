
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftL_A_PARENleftR_A_PARENleftCROSSleftSTARleftCONDITIONINGleftPIPEleftEQUALSleftANDleftPLUSrightUNEGATEEQUALS NAME STRING PROBABILITY_VALUE BIT VALIDITY CONDITIONING LPAREN RPAREN L_S_PAREN R_S_PAREN L_B_PAREN R_B_PAREN L_A_PAREN R_A_PAREN SEMICOL COLON COMMA PLUS STAR PIPE KET CROSS AND NEGATE MARGINAL CPT FLIP COPY TRUTH UNIFORM_STATE FALSE TRUE FALSITY PRINT IDN RANDOM_STATE SWAPprogram : stm program : stm SEMICOL programstm : PRINT LPAREN exp RPAREN stm : exp stm : varStore EQUALS expexp : LPAREN exp RPARENexp : varLoad\n            | validity\n            | conditioning\n            | state\n            | stateExp\n            | predicate\n            | predicateExp\n            | channel\n            | channelExp\n            | stateTransformation\n            | predicateTransformation\n            | builtin_function\n            varLoad : NAME  varStore : NAME validity : exp VALIDITY expconditioning : exp CONDITIONING expstateTransformation : exp R_A_PAREN exppredicateTransformation : exp L_A_PAREN expstate : L_S_PAREN stateBody R_S_PARENstateBody : stateElem PLUS stateBodystateBody : stateElemstateElem : PROBABILITY_VALUE PIPE nameOrBool optionKETnameOrBool : name\n                    | string\n                    | booleanname : NAMEstring : STRINGboolean : TRUE\n                | FALSEoptionKET : KET\n                | emptystateExp : exp MARGINAL dimensionSel\n     dimensionSel : L_S_PAREN dimensionSelBody R_S_PARENdimensionSelBody : dimensionSelElem COMMA dimensionSelBodydimensionSelBody : dimensionSelElemdimensionSelElem : BITpredicate : L_B_PAREN predicateBody R_B_PARENpredicateBody : predicateElem COMMA predicateBodypredicateBody : predicateElempredicateElem : nameOrBool COLON PROBABILITY_VALUEpredicateExp : exp CROSS exp\n                    | exp AND exp\n                    | exp PLUS exp\n                    | exp PIPE exp\n                    | PROBABILITY_VALUE STAR exp\n    predicateExp : NEGATE exp %prec UNEGATE channel : L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN  matrice : L_S_PAREN righe R_S_PAREN  righe  : riga COMMA righe righe  : riga  riga : L_S_PAREN riga_values R_S_PAREN  riga_values  : PROBABILITY_VALUE  riga_values  : PROBABILITY_VALUE COMMA riga_valueschannelExp : exp STAR exp\n     domcod : L_S_PAREN domcod_values R_S_PAREN  domcod_values : nameOrBool  domcod_values :  nameOrBool COMMA domcod_valuesbuiltin_function : FLIP LPAREN PROBABILITY_VALUE RPAREN\n                    | UNIFORM_STATE LPAREN domcod_values RPAREN\n                    | RANDOM_STATE LPAREN domcod_values RPAREN\n                    | FALSITY LPAREN domcod_values RPAREN\n                    | COPY LPAREN domcod_values RPAREN\n                    | IDN LPAREN domcod_values RPAREN\n                    | SWAP LPAREN domcod COMMA domcod RPAREN\n                    | CPT LPAREN riga_values RPAREN\n                    | TRUTH LPAREN domcod_values RPARENempty : '
    
_lr_action_items = {'STAR':([2,3,5,7,8,9,16,17,18,20,24,26,28,31,33,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[-17,-16,-12,-19,36,46,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,46,-52,46,-51,46,-49,-38,46,-22,-50,46,46,-48,-60,-25,46,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'UNIFORM_STATE':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'L_S_PAREN':([0,22,27,30,35,36,37,38,39,40,41,42,43,44,45,46,54,69,72,74,111,129,133,148,],[13,13,13,72,13,13,13,13,80,13,13,13,13,13,13,13,13,105,109,13,105,105,109,105,]),'FALSITY':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'FLIP':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'TRUE':([23,47,48,49,53,55,56,93,103,105,117,],[60,60,60,60,60,60,60,60,60,60,60,]),'R_B_PAREN':([63,65,127,128,],[102,-45,-46,-44,]),'VALIDITY':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[-17,-16,-12,-19,37,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,37,-52,37,-51,37,-49,-38,-23,-22,-50,-24,-47,-48,-60,-25,37,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'IDN':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'FALSE':([23,47,48,49,53,55,56,93,103,105,117,],[68,68,68,68,68,68,68,68,68,68,68,]),'COLON':([59,60,61,62,64,66,67,68,],[-32,-34,101,-33,-30,-29,-31,-35,]),'COPY':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'AND':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[-17,-16,-12,-19,45,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,45,-52,45,45,45,-49,-38,45,45,45,45,45,-48,45,-25,45,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'LPAREN':([0,1,10,11,12,14,15,19,21,22,25,27,29,35,36,37,38,40,41,42,43,44,45,46,54,74,],[22,34,47,48,49,53,54,55,56,22,69,22,71,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'PROBABILITY_VALUE':([0,13,22,27,34,35,36,37,38,40,41,42,43,44,45,46,54,71,74,95,101,109,132,],[8,50,8,8,75,8,8,8,8,8,8,8,8,8,8,8,8,107,8,50,127,107,107,]),'L_B_PAREN':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'PLUS':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,52,57,58,59,60,62,64,66,67,68,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,121,123,125,126,131,137,140,141,142,150,152,],[-17,-16,-12,-19,38,-8,-10,-15,-11,-14,-7,-13,-18,-9,95,-19,38,-32,-34,-33,-30,-29,-31,-35,-52,38,38,38,-49,-38,38,38,38,38,38,38,38,-25,38,-6,-43,-64,-66,-72,-65,-73,-67,-68,-69,-71,-39,-37,-36,-28,-70,-53,]),'TRUTH':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'STRING':([23,47,48,49,53,55,56,93,103,105,117,],[62,62,62,62,62,62,62,62,62,62,62,]),'PRINT':([0,74,],[15,15,]),'KET':([59,60,62,64,66,67,68,121,],[-32,-34,-33,-30,-29,-31,-35,141,]),'RPAREN':([2,3,5,16,17,18,20,24,26,28,31,33,57,58,59,60,62,64,66,67,68,70,75,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,94,96,97,98,99,100,102,106,107,113,118,119,120,123,125,126,131,137,139,143,144,145,150,152,],[-17,-16,-12,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,100,-32,-34,-33,-30,-29,-31,-35,-52,113,-51,-21,-49,-38,-23,-22,-50,-24,-47,-48,-60,-62,118,119,120,-25,123,124,125,126,-6,-43,131,-58,-64,-66,-72,-65,-67,-68,-69,-71,-39,-63,150,-61,-59,-70,-53,]),'SWAP':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'NAME':([0,22,23,27,35,36,37,38,40,41,42,43,44,45,46,47,48,49,53,54,55,56,74,93,103,105,117,],[7,57,59,57,57,57,57,57,57,57,57,57,57,57,57,59,59,59,59,57,59,59,7,59,59,59,59,]),'R_A_PAREN':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,144,150,151,152,],[-17,-16,-12,-19,40,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,40,-52,40,-51,40,-49,-38,-23,-22,-50,40,-47,-48,-60,-25,40,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-61,-70,152,-53,]),'EQUALS':([4,7,],[35,-20,]),'NEGATE':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MARGINAL':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[-17,-16,-12,-19,39,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,39,-52,39,-51,39,-49,-38,-23,-22,-50,-24,-47,-48,-60,-25,39,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'R_S_PAREN':([51,52,59,60,62,64,66,67,68,89,107,108,110,114,115,116,121,122,130,134,139,140,141,142,145,146,147,149,],[94,-27,-32,-34,-33,-30,-29,-31,-35,-62,-58,-56,135,137,-42,-41,-73,-26,144,147,-63,-37,-36,-28,-59,-55,-57,-40,]),'$end':([2,3,5,6,7,9,16,17,18,20,24,26,28,31,32,33,57,70,76,77,78,79,81,82,83,84,85,86,87,88,94,100,102,112,113,118,119,120,123,124,125,126,131,137,150,152,],[-17,-16,-12,0,-19,-4,-8,-10,-15,-11,-14,-7,-13,-18,-1,-9,-19,-52,-5,-51,-21,-49,-38,-23,-22,-50,-24,-47,-48,-60,-25,-6,-43,-2,-64,-66,-72,-65,-67,-3,-68,-69,-71,-39,-70,-53,]),'CONDITIONING':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[-17,-16,-12,-19,41,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,41,-52,41,41,41,-49,-38,41,-22,-50,41,41,-48,41,-25,41,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'PIPE':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,50,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[-17,-16,-12,-19,42,-8,-10,-15,-11,-14,-7,-13,-18,-9,93,-19,42,-52,42,42,42,-49,-38,42,42,-50,42,42,-48,42,-25,42,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'BIT':([80,138,],[115,115,]),'COMMA':([59,60,62,64,65,66,67,68,73,89,104,107,108,115,116,127,135,136,144,147,],[-32,-34,-33,-30,103,-29,-31,-35,111,117,129,132,133,-42,138,-46,-54,148,-61,-57,]),'L_A_PAREN':([0,2,3,5,7,9,16,17,18,20,22,24,26,27,28,31,33,35,36,37,38,40,41,42,43,44,45,46,54,57,58,70,74,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[30,-17,-16,-12,-19,43,-8,-10,-15,-11,30,-14,-7,30,-13,-18,-9,30,30,30,30,30,30,30,30,30,30,30,30,-19,43,-52,30,43,-51,43,-49,-38,-23,-22,-50,-24,-47,-48,-60,-25,43,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'CROSS':([2,3,5,7,9,16,17,18,20,24,26,28,31,33,57,58,70,76,77,78,79,81,82,83,84,85,86,87,88,94,97,100,102,113,118,119,120,123,125,126,131,137,150,152,],[-17,-16,-12,-19,44,-8,-10,-15,-11,-14,-7,-13,-18,-9,-19,44,-52,44,-51,44,-49,-38,44,-22,-50,44,-47,-48,-60,-25,44,-6,-43,-64,-66,-72,-65,-67,-68,-69,-71,-39,-70,-53,]),'SEMICOL':([2,3,5,7,9,16,17,18,20,24,26,28,31,32,33,57,70,76,77,78,79,81,82,83,84,85,86,87,88,94,100,102,113,118,119,120,123,124,125,126,131,137,150,152,],[-17,-16,-12,-19,-4,-8,-10,-15,-11,-14,-7,-13,-18,74,-9,-19,-52,-5,-51,-21,-49,-38,-23,-22,-50,-24,-47,-48,-60,-25,-6,-43,-64,-66,-72,-65,-67,-3,-68,-69,-71,-39,-70,-53,]),'RANDOM_STATE':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'CPT':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'riga':([72,133,],[108,108,]),'riga_values':([71,109,132,],[106,134,145,]),'domcod_values':([47,48,49,53,55,56,105,117,],[90,91,92,96,98,99,130,139,]),'predicateTransformation':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'stateTransformation':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'righe':([72,133,],[110,146,]),'stateBody':([13,95,],[51,122,]),'domcod':([69,111,129,148,],[104,136,143,151,]),'validity':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'state':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'empty':([121,],[140,]),'varStore':([0,74,],[4,4,]),'string':([23,47,48,49,53,55,56,93,103,105,117,],[64,64,64,64,64,64,64,64,64,64,64,]),'predicate':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'stateExp':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'channelExp':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'boolean':([23,47,48,49,53,55,56,93,103,105,117,],[67,67,67,67,67,67,67,67,67,67,67,]),'dimensionSel':([39,],[81,]),'program':([0,74,],[6,112,]),'dimensionSelElem':([80,138,],[116,116,]),'channel':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'varLoad':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'conditioning':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'nameOrBool':([23,47,48,49,53,55,56,93,103,105,117,],[61,89,89,89,89,89,89,121,61,89,89,]),'builtin_function':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'predicateExp':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'exp':([0,22,27,35,36,37,38,40,41,42,43,44,45,46,54,74,],[9,58,70,76,77,78,79,82,83,84,85,86,87,88,97,9,]),'predicateBody':([23,103,],[63,128,]),'dimensionSelBody':([80,138,],[114,149,]),'matrice':([30,],[73,]),'name':([23,47,48,49,53,55,56,93,103,105,117,],[66,66,66,66,66,66,66,66,66,66,66,]),'stm':([0,74,],[32,32,]),'optionKET':([121,],[142,]),'stateElem':([13,95,],[52,52,]),'predicateElem':([23,103,],[65,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stm','program',1,'p_program_singleC','eplParser.py',138),
  ('program -> stm SEMICOL program','program',3,'p_program_seqC','eplParser.py',150),
  ('stm -> PRINT LPAREN exp RPAREN','stm',4,'p_stm_print','eplParser.py',158),
  ('stm -> exp','stm',1,'p_stm_exp','eplParser.py',162),
  ('stm -> varStore EQUALS exp','stm',3,'p_stm_assign','eplParser.py',166),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_par','eplParser.py',170),
  ('exp -> varLoad','exp',1,'p_exp_state','eplParser.py',174),
  ('exp -> validity','exp',1,'p_exp_state','eplParser.py',175),
  ('exp -> conditioning','exp',1,'p_exp_state','eplParser.py',176),
  ('exp -> state','exp',1,'p_exp_state','eplParser.py',177),
  ('exp -> stateExp','exp',1,'p_exp_state','eplParser.py',178),
  ('exp -> predicate','exp',1,'p_exp_state','eplParser.py',179),
  ('exp -> predicateExp','exp',1,'p_exp_state','eplParser.py',180),
  ('exp -> channel','exp',1,'p_exp_state','eplParser.py',181),
  ('exp -> channelExp','exp',1,'p_exp_state','eplParser.py',182),
  ('exp -> stateTransformation','exp',1,'p_exp_state','eplParser.py',183),
  ('exp -> predicateTransformation','exp',1,'p_exp_state','eplParser.py',184),
  ('exp -> builtin_function','exp',1,'p_exp_state','eplParser.py',185),
  ('varLoad -> NAME','varLoad',1,'p_varLoad','eplParser.py',191),
  ('varStore -> NAME','varStore',1,'p_varStore','eplParser.py',195),
  ('validity -> exp VALIDITY exp','validity',3,'p_validity','eplParser.py',199),
  ('conditioning -> exp CONDITIONING exp','conditioning',3,'p_conditioning','eplParser.py',203),
  ('stateTransformation -> exp R_A_PAREN exp','stateTransformation',3,'p_stateTransformation','eplParser.py',207),
  ('predicateTransformation -> exp L_A_PAREN exp','predicateTransformation',3,'p_predicate_transformation','eplParser.py',211),
  ('state -> L_S_PAREN stateBody R_S_PAREN','state',3,'p_state_par','eplParser.py',215),
  ('stateBody -> stateElem PLUS stateBody','stateBody',3,'p_stateBody','eplParser.py',219),
  ('stateBody -> stateElem','stateBody',1,'p_stateBody_singleElem','eplParser.py',224),
  ('stateElem -> PROBABILITY_VALUE PIPE nameOrBool optionKET','stateElem',4,'p_state_elem','eplParser.py',228),
  ('nameOrBool -> name','nameOrBool',1,'p_nameOrBool','eplParser.py',232),
  ('nameOrBool -> string','nameOrBool',1,'p_nameOrBool','eplParser.py',233),
  ('nameOrBool -> boolean','nameOrBool',1,'p_nameOrBool','eplParser.py',234),
  ('name -> NAME','name',1,'p_name','eplParser.py',238),
  ('string -> STRING','string',1,'p_string','eplParser.py',242),
  ('boolean -> TRUE','boolean',1,'p_boolean','eplParser.py',246),
  ('boolean -> FALSE','boolean',1,'p_boolean','eplParser.py',247),
  ('optionKET -> KET','optionKET',1,'p_optionKET','eplParser.py',251),
  ('optionKET -> empty','optionKET',1,'p_optionKET','eplParser.py',252),
  ('stateExp -> exp MARGINAL dimensionSel','stateExp',3,'p_state_Exp','eplParser.py',255),
  ('dimensionSel -> L_S_PAREN dimensionSelBody R_S_PAREN','dimensionSel',3,'p_dimensionSel','eplParser.py',260),
  ('dimensionSelBody -> dimensionSelElem COMMA dimensionSelBody','dimensionSelBody',3,'p_dimensionSelBody','eplParser.py',264),
  ('dimensionSelBody -> dimensionSelElem','dimensionSelBody',1,'p_dimensionSelBody_singleElem','eplParser.py',269),
  ('dimensionSelElem -> BIT','dimensionSelElem',1,'p_dimensionSelElem','eplParser.py',273),
  ('predicate -> L_B_PAREN predicateBody R_B_PAREN','predicate',3,'p_predicate_par','eplParser.py',277),
  ('predicateBody -> predicateElem COMMA predicateBody','predicateBody',3,'p_predicateBody','eplParser.py',281),
  ('predicateBody -> predicateElem','predicateBody',1,'p_predicateBody_singleElem','eplParser.py',286),
  ('predicateElem -> nameOrBool COLON PROBABILITY_VALUE','predicateElem',3,'p_predicate_elem','eplParser.py',290),
  ('predicateExp -> exp CROSS exp','predicateExp',3,'p_predicate_exp','eplParser.py',294),
  ('predicateExp -> exp AND exp','predicateExp',3,'p_predicate_exp','eplParser.py',295),
  ('predicateExp -> exp PLUS exp','predicateExp',3,'p_predicate_exp','eplParser.py',296),
  ('predicateExp -> exp PIPE exp','predicateExp',3,'p_predicate_exp','eplParser.py',297),
  ('predicateExp -> PROBABILITY_VALUE STAR exp','predicateExp',3,'p_predicate_exp','eplParser.py',298),
  ('predicateExp -> NEGATE exp','predicateExp',2,'p_predicate_negate','eplParser.py',309),
  ('channel -> L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN','channel',7,'p_channel_def','eplParser.py',313),
  ('matrice -> L_S_PAREN righe R_S_PAREN','matrice',3,'p_matrice','eplParser.py',317),
  ('righe -> riga COMMA righe','righe',3,'p_righe','eplParser.py',321),
  ('righe -> riga','righe',1,'p_righe_singleRow','eplParser.py',326),
  ('riga -> L_S_PAREN riga_values R_S_PAREN','riga',3,'p_riga','eplParser.py',330),
  ('riga_values -> PROBABILITY_VALUE','riga_values',1,'p_riga_values_single','eplParser.py',334),
  ('riga_values -> PROBABILITY_VALUE COMMA riga_values','riga_values',3,'p_riga_values','eplParser.py',338),
  ('channelExp -> exp STAR exp','channelExp',3,'p_channel_Exp','eplParser.py',343),
  ('domcod -> L_S_PAREN domcod_values R_S_PAREN','domcod',3,'p_domcod','eplParser.py',348),
  ('domcod_values -> nameOrBool','domcod_values',1,'p_domcod_values_last','eplParser.py',352),
  ('domcod_values -> nameOrBool COMMA domcod_values','domcod_values',3,'p_domcod_values','eplParser.py',356),
  ('builtin_function -> FLIP LPAREN PROBABILITY_VALUE RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',361),
  ('builtin_function -> UNIFORM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',362),
  ('builtin_function -> RANDOM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',363),
  ('builtin_function -> FALSITY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',364),
  ('builtin_function -> COPY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',365),
  ('builtin_function -> IDN LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',366),
  ('builtin_function -> SWAP LPAREN domcod COMMA domcod RPAREN','builtin_function',6,'p_builtin_function','eplParser.py',367),
  ('builtin_function -> CPT LPAREN riga_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',368),
  ('builtin_function -> TRUTH LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',369),
  ('empty -> <empty>','empty',0,'p_empty','eplParser.py',373),
]
