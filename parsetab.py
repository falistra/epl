
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftL_A_PARENleftR_A_PARENleftCROSSleftSTARleftCONDITIONINGleftPIPEleftEQUALSleftANDleftPLUSrightUNEGATEEQUALS NAME STRING PROBABILITY_VALUE BIT VALIDITY CONDITIONING LPAREN RPAREN L_S_PAREN R_S_PAREN L_B_PAREN R_B_PAREN L_A_PAREN R_A_PAREN SEMICOL COLON COMMA PLUS STAR PIPE KET CROSS AND NEGATE MARGINAL SWAP CPT RANDOM_STATE TRUTH PRINT FALSITY COPY UNIFORM_STATE IDN TRUE FLIP FALSEprogram : stm program : stm SEMICOL programstm : PRINT LPAREN exp RPAREN stm : exp stm : varStore EQUALS expexp : LPAREN exp RPARENexp : varLoad\n            | validity\n            | conditioning\n            | state\n            | stateExp\n            | predicate\n            | predicateExp\n            | channel\n            | channelExp\n            | stateTransformation\n            | predicateTransformation\n            | builtin_function\n            varLoad : NAME  varStore : NAME validity : exp VALIDITY expconditioning : exp CONDITIONING expstateTransformation : exp R_A_PAREN exppredicateTransformation : exp L_A_PAREN expstate : L_S_PAREN stateBody R_S_PARENstateBody : stateElem PLUS stateBodystateBody : stateElemstateElem : PROBABILITY_VALUE PIPE nameOrBool optionKETnameOrBool : name\n                    | string\n                    | booleanname : NAMEstring : STRINGboolean : TRUE\n                | FALSEoptionKET : KET\n                | emptystateExp : exp MARGINAL dimensionSel\n     dimensionSel : L_S_PAREN dimensionSelBody R_S_PARENdimensionSelBody : dimensionSelElem COMMA dimensionSelBodydimensionSelBody : dimensionSelElemdimensionSelElem : BITpredicate : L_B_PAREN predicateBody R_B_PARENpredicateBody : predicateElem COMMA predicateBodypredicateBody : predicateElempredicateElem : nameOrBool COLON PROBABILITY_VALUEpredicateExp : exp CROSS exp\n                    | exp AND exp\n                    | exp PLUS exp\n                    | exp PIPE exp\n                    | PROBABILITY_VALUE STAR exp\n    predicateExp : NEGATE exp %prec UNEGATE channel : L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN  matrice : L_S_PAREN righe R_S_PAREN  righe  : riga COMMA righe righe  : riga  riga : L_S_PAREN riga_values R_S_PAREN  riga_values  : PROBABILITY_VALUE  riga_values  : PROBABILITY_VALUE COMMA riga_valueschannelExp : exp STAR exp\n     domcod : L_S_PAREN domcod_values R_S_PAREN  domcod_values : nameOrBool  domcod_values :  nameOrBool COMMA domcod_valuesbuiltin_function : FLIP LPAREN PROBABILITY_VALUE RPAREN\n                    | UNIFORM_STATE LPAREN domcod_values RPAREN\n                    | RANDOM_STATE LPAREN domcod_values RPAREN\n                    | FALSITY LPAREN domcod_values RPAREN\n                    | COPY LPAREN domcod_values RPAREN\n                    | IDN LPAREN domcod_values RPAREN\n                    | SWAP LPAREN domcod COMMA domcod RPAREN\n                    | CPT LPAREN riga_values RPAREN\n                    | TRUTH LPAREN domcod_values RPARENempty : '
    
_lr_action_items = {'BIT':([108,148,],[133,133,]),'NEGATE':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FLIP':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'RANDOM_STATE':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'AND':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,57,-19,57,-19,-52,-6,-25,57,57,57,57,57,-48,-49,57,57,57,57,57,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),'RPAREN':([1,2,7,8,9,10,11,14,19,24,28,30,36,37,44,65,66,67,69,70,72,73,75,76,77,78,80,83,84,85,87,88,89,94,95,96,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,137,144,145,146,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,78,-19,-52,-35,-31,-34,-29,-32,-33,-30,-62,114,115,-6,-25,-51,118,119,120,121,122,127,128,-58,-24,-23,-48,-49,-22,-50,-21,-47,-60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-63,-59,-61,150,-39,-70,-53,]),'TRUE':([32,34,43,45,47,49,52,79,97,111,113,],[67,67,67,67,67,67,67,67,67,67,67,]),'TRUTH':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'COMMA':([51,65,66,67,69,70,71,72,73,75,91,96,98,125,126,133,134,135,141,145,],[93,-35,-31,-34,-29,-32,111,-33,-30,113,124,129,131,-54,143,-42,148,-46,-57,-61,]),'PRINT':([0,41,],[21,21,]),'LPAREN':([0,3,4,5,15,16,17,20,21,22,26,27,29,41,42,46,48,55,56,57,58,59,60,61,62,63,],[5,34,35,5,43,5,45,47,48,49,52,53,54,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'COPY':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'L_S_PAREN':([0,5,16,25,41,42,46,48,50,54,55,56,57,58,59,60,61,62,63,64,93,124,131,143,],[6,6,6,50,6,6,6,6,90,97,6,6,6,6,6,6,6,6,6,108,97,90,97,97,]),'COLON':([65,66,67,68,69,70,72,73,],[-35,-31,-34,110,-29,-32,-33,-30,]),'KET':([65,66,67,69,70,72,73,116,],[-35,-31,-34,-29,-32,-33,-30,139,]),'$end':([1,2,7,8,9,10,11,12,14,19,23,24,28,30,31,33,37,44,78,80,82,83,86,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,121,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-1,-13,-15,0,-9,-17,-14,-4,-19,-19,-52,-6,-25,-2,-51,-5,-24,-23,-48,-49,-22,-50,-21,-47,-60,-38,-43,-66,-64,-65,-72,-69,-3,-68,-67,-71,-39,-70,-53,]),'CONDITIONING':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,59,-19,59,-19,-52,-6,-25,59,59,59,59,59,-48,-49,-22,-50,59,59,59,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),'STAR':([1,2,7,8,9,10,11,13,14,19,24,28,30,31,33,36,37,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,42,-13,-15,-9,-17,-14,63,-19,63,-19,-52,-6,-25,-51,63,63,63,63,-48,-49,-22,-50,63,63,-60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),'STRING':([32,34,43,45,47,49,52,79,97,111,113,],[72,72,72,72,72,72,72,72,72,72,72,]),'EQUALS':([18,33,],[46,-20,]),'FALSE':([32,34,43,45,47,49,52,79,97,111,113,],[65,65,65,65,65,65,65,65,65,65,65,]),'L_A_PAREN':([0,1,2,5,7,8,9,10,11,14,16,19,24,28,30,31,33,36,37,41,42,44,46,48,55,56,57,58,59,60,61,62,63,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[25,-16,-12,25,-18,-11,-10,-7,-8,-13,25,-15,-9,-17,-14,55,-19,55,-19,25,25,-52,25,25,25,25,25,25,25,25,25,25,25,-6,-25,-51,55,55,-24,-23,-48,-49,-22,-50,55,-47,-60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),'R_A_PAREN':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,145,147,149,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,56,-19,56,-19,-52,-6,-25,-51,56,56,56,-23,-48,-49,-22,-50,56,-47,-60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-61,-39,152,-70,-53,]),'R_S_PAREN':([39,40,65,66,67,69,70,72,73,75,91,92,96,116,117,123,130,132,133,134,137,138,139,140,141,142,144,151,],[80,-27,-35,-31,-34,-29,-32,-33,-30,-62,-56,125,-58,-73,-26,141,145,147,-42,-41,-63,-28,-36,-37,-57,-55,-59,-40,]),'VALIDITY':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,61,-19,61,-19,-52,-6,-25,-51,61,61,-24,-23,-48,-49,-22,-50,61,-47,-60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),'PROBABILITY_VALUE':([0,5,6,16,35,41,42,46,48,53,55,56,57,58,59,60,61,62,63,81,90,110,129,],[13,13,38,13,77,13,13,13,13,96,13,13,13,13,13,13,13,13,13,38,96,135,96,]),'CPT':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'R_B_PAREN':([71,74,135,136,],[-45,112,-46,-44,]),'L_B_PAREN':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'SWAP':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'SEMICOL':([1,2,7,8,9,10,11,12,14,19,24,28,30,31,33,37,44,78,80,83,86,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,121,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,41,-13,-15,-9,-17,-14,-4,-19,-19,-52,-6,-25,-51,-5,-24,-23,-48,-49,-22,-50,-21,-47,-60,-38,-43,-66,-64,-65,-72,-69,-3,-68,-67,-71,-39,-70,-53,]),'PIPE':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,38,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,60,-19,60,-19,79,-52,-6,-25,60,60,60,60,60,-48,-49,60,-50,60,60,60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),'UNIFORM_STATE':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'CROSS':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,62,-19,62,-19,-52,-6,-25,-51,62,62,62,62,-48,-49,-22,-50,62,-47,-60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),'IDN':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FALSITY':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'PLUS':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,40,44,65,66,67,69,70,72,73,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,116,118,119,120,122,127,128,138,139,140,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,58,-19,58,-19,81,-52,-35,-31,-34,-29,-32,-33,-30,-6,-25,58,58,58,58,58,58,-49,58,58,58,58,58,-38,-43,-66,-64,-73,-65,-72,-69,-68,-67,-71,-28,-36,-37,-39,-70,-53,]),'NAME':([0,5,16,32,34,41,42,43,45,46,47,48,49,52,55,56,57,58,59,60,61,62,63,79,97,111,113,],[33,37,37,70,70,33,37,70,70,37,70,37,70,70,37,37,37,37,37,37,37,37,37,70,70,70,70,]),'MARGINAL':([1,2,7,8,9,10,11,14,19,24,28,30,31,33,36,37,44,78,80,83,86,88,99,100,101,102,103,104,105,106,107,109,112,114,115,118,119,120,122,127,128,147,150,152,],[-16,-12,-18,-11,-10,-7,-8,-13,-15,-9,-17,-14,64,-19,64,-19,-52,-6,-25,-51,64,64,-24,-23,-48,-49,-22,-50,64,-47,-60,-38,-43,-66,-64,-65,-72,-69,-68,-67,-71,-39,-70,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stateTransformation':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'dimensionSel':([64,],[109,]),'varStore':([0,41,],[18,18,]),'riga_values':([53,90,129,],[95,123,144,]),'channelExp':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'predicateElem':([32,111,],[71,71,]),'empty':([116,],[140,]),'nameOrBool':([32,34,43,45,47,49,52,79,97,111,113,],[68,75,75,75,75,75,75,116,75,68,75,]),'riga':([50,124,],[91,91,]),'dimensionSelBody':([108,148,],[132,151,]),'matrice':([25,],[51,]),'stateExp':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'state':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'program':([0,41,],[23,82,]),'conditioning':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'varLoad':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'validity':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'stm':([0,41,],[12,12,]),'builtin_function':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'optionKET':([116,],[138,]),'righe':([50,124,],[92,142,]),'string':([32,34,43,45,47,49,52,79,97,111,113,],[73,73,73,73,73,73,73,73,73,73,73,]),'domcod':([54,93,131,143,],[98,126,146,149,]),'predicateBody':([32,111,],[74,136,]),'predicateExp':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'boolean':([32,34,43,45,47,49,52,79,97,111,113,],[66,66,66,66,66,66,66,66,66,66,66,]),'channel':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'name':([32,34,43,45,47,49,52,79,97,111,113,],[69,69,69,69,69,69,69,69,69,69,69,]),'stateBody':([6,81,],[39,117,]),'predicateTransformation':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'exp':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[31,36,44,31,83,86,88,99,100,101,102,103,104,105,106,107,]),'domcod_values':([34,43,45,47,49,52,97,113,],[76,84,85,87,89,94,130,137,]),'predicate':([0,5,16,41,42,46,48,55,56,57,58,59,60,61,62,63,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'dimensionSelElem':([108,148,],[134,134,]),'stateElem':([6,81,],[40,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stm','program',1,'p_program_singleC','eplParser.py',138),
  ('program -> stm SEMICOL program','program',3,'p_program_seqC','eplParser.py',150),
  ('stm -> PRINT LPAREN exp RPAREN','stm',4,'p_stm_print','eplParser.py',158),
  ('stm -> exp','stm',1,'p_stm_exp','eplParser.py',162),
  ('stm -> varStore EQUALS exp','stm',3,'p_stm_assign','eplParser.py',166),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_par','eplParser.py',170),
  ('exp -> varLoad','exp',1,'p_exp_state','eplParser.py',174),
  ('exp -> validity','exp',1,'p_exp_state','eplParser.py',175),
  ('exp -> conditioning','exp',1,'p_exp_state','eplParser.py',176),
  ('exp -> state','exp',1,'p_exp_state','eplParser.py',177),
  ('exp -> stateExp','exp',1,'p_exp_state','eplParser.py',178),
  ('exp -> predicate','exp',1,'p_exp_state','eplParser.py',179),
  ('exp -> predicateExp','exp',1,'p_exp_state','eplParser.py',180),
  ('exp -> channel','exp',1,'p_exp_state','eplParser.py',181),
  ('exp -> channelExp','exp',1,'p_exp_state','eplParser.py',182),
  ('exp -> stateTransformation','exp',1,'p_exp_state','eplParser.py',183),
  ('exp -> predicateTransformation','exp',1,'p_exp_state','eplParser.py',184),
  ('exp -> builtin_function','exp',1,'p_exp_state','eplParser.py',185),
  ('varLoad -> NAME','varLoad',1,'p_varLoad','eplParser.py',190),
  ('varStore -> NAME','varStore',1,'p_varStore','eplParser.py',194),
  ('validity -> exp VALIDITY exp','validity',3,'p_validity','eplParser.py',198),
  ('conditioning -> exp CONDITIONING exp','conditioning',3,'p_conditioning','eplParser.py',202),
  ('stateTransformation -> exp R_A_PAREN exp','stateTransformation',3,'p_stateTransformation','eplParser.py',206),
  ('predicateTransformation -> exp L_A_PAREN exp','predicateTransformation',3,'p_predicate_transformation','eplParser.py',210),
  ('state -> L_S_PAREN stateBody R_S_PAREN','state',3,'p_state_par','eplParser.py',214),
  ('stateBody -> stateElem PLUS stateBody','stateBody',3,'p_stateBody','eplParser.py',218),
  ('stateBody -> stateElem','stateBody',1,'p_stateBody_singleElem','eplParser.py',223),
  ('stateElem -> PROBABILITY_VALUE PIPE nameOrBool optionKET','stateElem',4,'p_state_elem','eplParser.py',227),
  ('nameOrBool -> name','nameOrBool',1,'p_nameOrBool','eplParser.py',231),
  ('nameOrBool -> string','nameOrBool',1,'p_nameOrBool','eplParser.py',232),
  ('nameOrBool -> boolean','nameOrBool',1,'p_nameOrBool','eplParser.py',233),
  ('name -> NAME','name',1,'p_name','eplParser.py',237),
  ('string -> STRING','string',1,'p_string','eplParser.py',241),
  ('boolean -> TRUE','boolean',1,'p_boolean','eplParser.py',245),
  ('boolean -> FALSE','boolean',1,'p_boolean','eplParser.py',246),
  ('optionKET -> KET','optionKET',1,'p_optionKET','eplParser.py',250),
  ('optionKET -> empty','optionKET',1,'p_optionKET','eplParser.py',251),
  ('stateExp -> exp MARGINAL dimensionSel','stateExp',3,'p_state_Exp','eplParser.py',254),
  ('dimensionSel -> L_S_PAREN dimensionSelBody R_S_PAREN','dimensionSel',3,'p_dimensionSel','eplParser.py',259),
  ('dimensionSelBody -> dimensionSelElem COMMA dimensionSelBody','dimensionSelBody',3,'p_dimensionSelBody','eplParser.py',263),
  ('dimensionSelBody -> dimensionSelElem','dimensionSelBody',1,'p_dimensionSelBody_singleElem','eplParser.py',268),
  ('dimensionSelElem -> BIT','dimensionSelElem',1,'p_dimensionSelElem','eplParser.py',272),
  ('predicate -> L_B_PAREN predicateBody R_B_PAREN','predicate',3,'p_predicate_par','eplParser.py',276),
  ('predicateBody -> predicateElem COMMA predicateBody','predicateBody',3,'p_predicateBody','eplParser.py',280),
  ('predicateBody -> predicateElem','predicateBody',1,'p_predicateBody_singleElem','eplParser.py',285),
  ('predicateElem -> nameOrBool COLON PROBABILITY_VALUE','predicateElem',3,'p_predicate_elem','eplParser.py',289),
  ('predicateExp -> exp CROSS exp','predicateExp',3,'p_predicate_exp','eplParser.py',293),
  ('predicateExp -> exp AND exp','predicateExp',3,'p_predicate_exp','eplParser.py',294),
  ('predicateExp -> exp PLUS exp','predicateExp',3,'p_predicate_exp','eplParser.py',295),
  ('predicateExp -> exp PIPE exp','predicateExp',3,'p_predicate_exp','eplParser.py',296),
  ('predicateExp -> PROBABILITY_VALUE STAR exp','predicateExp',3,'p_predicate_exp','eplParser.py',297),
  ('predicateExp -> NEGATE exp','predicateExp',2,'p_predicate_negate','eplParser.py',307),
  ('channel -> L_A_PAREN matrice COMMA domcod COMMA domcod R_A_PAREN','channel',7,'p_channel_def','eplParser.py',311),
  ('matrice -> L_S_PAREN righe R_S_PAREN','matrice',3,'p_matrice','eplParser.py',315),
  ('righe -> riga COMMA righe','righe',3,'p_righe','eplParser.py',319),
  ('righe -> riga','righe',1,'p_righe_singleRow','eplParser.py',324),
  ('riga -> L_S_PAREN riga_values R_S_PAREN','riga',3,'p_riga','eplParser.py',328),
  ('riga_values -> PROBABILITY_VALUE','riga_values',1,'p_riga_values_single','eplParser.py',332),
  ('riga_values -> PROBABILITY_VALUE COMMA riga_values','riga_values',3,'p_riga_values','eplParser.py',336),
  ('channelExp -> exp STAR exp','channelExp',3,'p_channel_Exp','eplParser.py',341),
  ('domcod -> L_S_PAREN domcod_values R_S_PAREN','domcod',3,'p_domcod','eplParser.py',346),
  ('domcod_values -> nameOrBool','domcod_values',1,'p_domcod_values_last','eplParser.py',350),
  ('domcod_values -> nameOrBool COMMA domcod_values','domcod_values',3,'p_domcod_values','eplParser.py',354),
  ('builtin_function -> FLIP LPAREN PROBABILITY_VALUE RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',359),
  ('builtin_function -> UNIFORM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',360),
  ('builtin_function -> RANDOM_STATE LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',361),
  ('builtin_function -> FALSITY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',362),
  ('builtin_function -> COPY LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',363),
  ('builtin_function -> IDN LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',364),
  ('builtin_function -> SWAP LPAREN domcod COMMA domcod RPAREN','builtin_function',6,'p_builtin_function','eplParser.py',365),
  ('builtin_function -> CPT LPAREN riga_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',366),
  ('builtin_function -> TRUTH LPAREN domcod_values RPAREN','builtin_function',4,'p_builtin_function','eplParser.py',367),
  ('empty -> <empty>','empty',0,'p_empty','eplParser.py',371),
]
